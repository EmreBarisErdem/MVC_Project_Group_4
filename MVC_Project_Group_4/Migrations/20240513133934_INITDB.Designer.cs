// <auto-generated />
using System;
using MVC_Project_Group_4.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_Project_Group_4.Migrations
{
    [DbContext(typeof(BurgerDBContext))]
    [Migration("20240513133934_INITDB")]
    partial class INITDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.EkstraMalzeme", b =>
                {
                    b.Property<int>("EkstraMalzemeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EkstraMalzemeID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("EkstraMalzemeID");

                    b.ToTable("EkstraMalzemeler");

                    b.HasData(
                        new
                        {
                            EkstraMalzemeID = 1,
                            Aciklama = "Taza Marul",
                            Ad = "Marul",
                            Adet = 1,
                            Fiyat = 2.5m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/marul.jpg"
                        },
                        new
                        {
                            EkstraMalzemeID = 2,
                            Aciklama = "Ayaş domatesi",
                            Ad = "Domates",
                            Adet = 1,
                            Fiyat = 3.5m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Domates.jpg "
                        },
                        new
                        {
                            EkstraMalzemeID = 3,
                            Aciklama = "Kornişon Turşusu",
                            Ad = "Turşu",
                            Adet = 1,
                            Fiyat = 2.5m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Tursu.jpg "
                        },
                        new
                        {
                            EkstraMalzemeID = 4,
                            Aciklama = "Karamelize Soğan",
                            Ad = "Soğan",
                            Adet = 1,
                            Fiyat = 1.2m,
                            PicturePath = " ~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/sogan.jpg"
                        },
                        new
                        {
                            EkstraMalzemeID = 5,
                            Aciklama = "1 paket mayonez",
                            Ad = "Mayonez",
                            Adet = 1,
                            Fiyat = 0.5m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Mayonez.jpg "
                        },
                        new
                        {
                            EkstraMalzemeID = 6,
                            Aciklama = "1 paket ketçap",
                            Ad = "Ketçap",
                            Adet = 1,
                            Fiyat = 0.5m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Ketcap.jpg "
                        },
                        new
                        {
                            EkstraMalzemeID = 7,
                            Aciklama = "Özel Baharat Soslu Tırtıklı Patates Kızartması",
                            Ad = "Tırtıklı Patates Kızartması",
                            Adet = 1,
                            Fiyat = 20m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Tirtikli_patates_kizartmasi.jpg "
                        },
                        new
                        {
                            EkstraMalzemeID = 8,
                            Aciklama = "6 Adet Kızarmış Soğan Halkası",
                            Ad = "6'lı Soğan Halkası",
                            Adet = 1,
                            Fiyat = 30m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Sogan_Halkasi.jpg "
                        },
                        new
                        {
                            EkstraMalzemeID = 9,
                            Aciklama = "1 paket Barbekü Sos",
                            Ad = "Barbekü Sos",
                            Adet = 1,
                            Fiyat = 1m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Barbaku_sos.jpg"
                        },
                        new
                        {
                            EkstraMalzemeID = 10,
                            Aciklama = "1 paket Ranch Sos",
                            Ad = "Ranch Sos",
                            Adet = 1,
                            Fiyat = 1m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Ranche_sos.jpg"
                        },
                        new
                        {
                            EkstraMalzemeID = 11,
                            Aciklama = "Mevsim Yeşillikleri ile yapılmış taze salata",
                            Ad = "Mini Salata",
                            Adet = 1,
                            Fiyat = 10m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Mini_Salata.jpg"
                        },
                        new
                        {
                            EkstraMalzemeID = 12,
                            Aciklama = "Dana Pastırma",
                            Ad = "Pastırma",
                            Adet = 3,
                            Fiyat = 50m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Ek_Urunler/Pastirma.jpg"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Hamburger", b =>
                {
                    b.Property<int>("HamburgerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HamburgerID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("HamburgerID");

                    b.ToTable("Hamburgerler");

                    b.HasData(
                        new
                        {
                            HamburgerID = 1,
                            Aciklama = "120g Burger köftesi ile cheddar peynirinin muhteşem uyumu...",
                            Ad = "CheeseBurger",
                            Adet = 1,
                            Fiyat = 150m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/CheeseBurger.jpg"
                        },
                        new
                        {
                            HamburgerID = 2,
                            Aciklama = "150g Dana Burger köftesi + Göbek Salata + domates + turşu + BigKing Sos",
                            Ad = "BigKing",
                            Adet = 1,
                            Fiyat = 180m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Big_King.jpg"
                        },
                        new
                        {
                            HamburgerID = 3,
                            Aciklama = "120g Dana Eti + Göbek Salata + domates + turşu + soğan",
                            Ad = "Whooper",
                            Adet = 1,
                            Fiyat = 180m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Whoper.jpg"
                        },
                        new
                        {
                            HamburgerID = 4,
                            Aciklama = "360g Burger Göbek Salata + domates + turşu + soğan",
                            Ad = "TripleWhooper",
                            Adet = 1,
                            Fiyat = 300m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Triple_Whopper.jpg"
                        },
                        new
                        {
                            HamburgerID = 5,
                            Aciklama = "90g Burger köftesi + domates + mayonez + ketçap + turşu",
                            Ad = "Jr BigMac",
                            Adet = 1,
                            Fiyat = 100m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/jr_bigmac.jpg"
                        },
                        new
                        {
                            HamburgerID = 6,
                            Aciklama = "150g Burger köftesi + Pastırma + domates + mayonez + ketçap + turşu",
                            Ad = "Pastırmalı Burger",
                            Adet = 1,
                            Fiyat = 230m,
                            PicturePath = "~/wwwroot/Pictures/Hamburgerler/Pastırmalı_burger.jpg"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Icecek", b =>
                {
                    b.Property<int>("IcecekID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IcecekID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("IcecekID");

                    b.ToTable("Icecekler");

                    b.HasData(
                        new
                        {
                            IcecekID = 1,
                            Aciklama = "Kutu İçecek",
                            Ad = "Coca-Cola",
                            Adet = 1,
                            Fiyat = 30m,
                            PicturePath = "~/wwwroot/Pictures/Icecekler/Coca_cola.jpg"
                        },
                        new
                        {
                            IcecekID = 2,
                            Aciklama = "Kutu İçecek",
                            Ad = "Coca-Cola-Zero",
                            Adet = 1,
                            Fiyat = 30m,
                            PicturePath = "~/wwwroot/Pictures/Icecekler/Coca_cola_zero.jpg"
                        },
                        new
                        {
                            IcecekID = 3,
                            Aciklama = "Kutu İçecek",
                            Ad = "Fanta",
                            Adet = 1,
                            Fiyat = 30m,
                            PicturePath = "~/wwwroot/Pictures/Icecekler/Fanta.jpg"
                        },
                        new
                        {
                            IcecekID = 4,
                            Aciklama = "Kutu İçecek",
                            Ad = "Sprite",
                            Adet = 1,
                            Fiyat = 30m,
                            PicturePath = "~/wwwroot/Pictures/Icecekler/Sprite.jpg"
                        },
                        new
                        {
                            IcecekID = 5,
                            Aciklama = "Büyük Ayran",
                            Ad = "Ayran",
                            Adet = 1,
                            Fiyat = 30m,
                            PicturePath = "~/wwwroot/Pictures/Icecekler/Buyuk_Ayran.jpg"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("MenuID");

                    b.ToTable("Menuler");

                    b.HasData(
                        new
                        {
                            MenuID = 1,
                            Aciklama = "1 Adet Cheeseburger + Tırtıklı Patates Kızartması + 1 Adet Kutu İçecek",
                            Ad = "Klasik Burger Menu",
                            Adet = 1,
                            Fiyat = 350m,
                            PicturePath = "~/wwwroot/Pictures/Menuler/Klasik_burger_menu.jpg"
                        },
                        new
                        {
                            MenuID = 2,
                            Aciklama = "1 Adet Pastırmalı Burger + Tırtıklı Patates + 1 Adet Kutu İçecek",
                            Ad = "Pastırmalı Burger Menu",
                            Adet = 1,
                            Fiyat = 350m,
                            PicturePath = "~/wwwroot/Pictures/Menuler/Benim_3_lum.jpg"
                        },
                        new
                        {
                            MenuID = 3,
                            Aciklama = "2 Adet Cheeseburger + Tırtıklı Patates + 2 Kutu İçecek",
                            Ad = "2'li Fırsat Menü",
                            Adet = 1,
                            Fiyat = 350m,
                            PicturePath = "~/wwwroot/Pictures/Menuler/Bjk_Menusu.jpg"
                        },
                        new
                        {
                            MenuID = 4,
                            Aciklama = "3 Adet TripleWhooper Burger + 2 Adet Tırtıklı Patates + 3 Adet Kutu İçecek",
                            Ad = "3'lü Jumbo Menü",
                            Adet = 1,
                            Fiyat = 450m,
                            PicturePath = "~/wwwroot/Pictures/Menuler/3_lu_big_king.jpg"
                        },
                        new
                        {
                            MenuID = 5,
                            Aciklama = "1 Adet CheeseBurger + 6'lı Soğan Halkası + Tırtıklı Patataes + 1adet kutu içecek",
                            Ad = "CheeseBurger & SoğanHalkası Menü",
                            Adet = 1,
                            Fiyat = 300m,
                            PicturePath = "~/wwwroot/Pictures/Menuler/chicken_menu.jpg"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.MenuDetay", b =>
                {
                    b.Property<int>("MenuDetayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuDetayID"));

                    b.Property<int>("EkMalzemeID")
                        .HasColumnType("int");

                    b.Property<int?>("EkstraMalzemeID")
                        .HasColumnType("int");

                    b.Property<int>("HamburgerID")
                        .HasColumnType("int");

                    b.Property<int>("IcecekID")
                        .HasColumnType("int");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("TatlıID")
                        .HasColumnType("int");

                    b.HasKey("MenuDetayID");

                    b.HasIndex("EkstraMalzemeID");

                    b.HasIndex("HamburgerID");

                    b.HasIndex("IcecekID");

                    b.HasIndex("MenuID");

                    b.HasIndex("TatlıID");

                    b.ToTable("MenuDetaylari");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "6829a5e2-1098-4992-a8ce-c73fb9e99952",
                            Name = "Yonetici",
                            NormalizedName = "YONETICI"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c76532a1-8b82-4a3d-9bc9-9f5211af2ccd",
                            Name = "Uye",
                            NormalizedName = "UYE"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Siparis", b =>
                {
                    b.Property<int>("SiparisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiparisID"));

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<int>("Boy")
                        .HasColumnType("int");

                    b.Property<string>("SiparisDetayAciklama")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SiparisTarihi")
                        .HasColumnType("datetime");

                    b.Property<int?>("UyeId")
                        .HasColumnType("int");

                    b.HasKey("SiparisID");

                    b.HasIndex("UyeId");

                    b.ToTable("Siparisler");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.SiparisDetay", b =>
                {
                    b.Property<int>("SiparisDetayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiparisDetayID"));

                    b.Property<int>("EkMalzemeID")
                        .HasColumnType("int");

                    b.Property<int?>("EkstraMalzemeID")
                        .HasColumnType("int");

                    b.Property<int>("HamburgerID")
                        .HasColumnType("int");

                    b.Property<int>("IcecekID")
                        .HasColumnType("int");

                    b.Property<int>("SiparisID")
                        .HasColumnType("int");

                    b.Property<int>("TatliID")
                        .HasColumnType("int");

                    b.HasKey("SiparisDetayID");

                    b.HasIndex("EkstraMalzemeID");

                    b.HasIndex("HamburgerID");

                    b.HasIndex("IcecekID");

                    b.HasIndex("SiparisID");

                    b.HasIndex("TatliID");

                    b.ToTable("SiparisDetaylari");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.SiparisMenu", b =>
                {
                    b.Property<int>("SiparisMenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiparisMenuID"));

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("SiparisID")
                        .HasColumnType("int");

                    b.HasKey("SiparisMenuID");

                    b.HasIndex("MenuID");

                    b.HasIndex("SiparisID");

                    b.ToTable("SiparisMenuleri");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Tatli", b =>
                {
                    b.Property<int>("TatliID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TatliID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("TatliID");

                    b.ToTable("Tatlilar");

                    b.HasData(
                        new
                        {
                            TatliID = 1,
                            Aciklama = "Çikolatalı ve dondurmalı enfes sufle",
                            Ad = "Sufle",
                            Adet = 1,
                            Fiyat = 50m,
                            PicturePath = "~/wwwroot/Pictures/Tatlilar/Cikolatali_sufle.jpg"
                        },
                        new
                        {
                            TatliID = 2,
                            Aciklama = "Nefis Püresi ile beraber elmalı tatlı damak zevkinize birebir",
                            Ad = "Elmalı Tatlı",
                            Adet = 1,
                            Fiyat = 35m,
                            PicturePath = "~/wwwroot/Pictures/Tatlilar/Elmali_tatli.jpg"
                        },
                        new
                        {
                            TatliID = 3,
                            Aciklama = "Çikolata parçacıklı muhteşem kurabiyelerimiz",
                            Ad = "Çikolatalı Cookie",
                            Adet = 1,
                            Fiyat = 35m,
                            PicturePath = "~/wwwroot/Pictures/Tatlilar/Cikolatali_cookie.jpg"
                        },
                        new
                        {
                            TatliID = 4,
                            Aciklama = "Leziz fırınlanmış sütlaça hayır diyemezsiniz...",
                            Ad = "Sütlaç",
                            Adet = 1,
                            Fiyat = 40m,
                            PicturePath = "~/wwwroot/Pictures/Tatlilar/Sutlac.jpg"
                        },
                        new
                        {
                            TatliID = 5,
                            Aciklama = "Dondurmalı İrmik helvası",
                            Ad = "İrmik Helvası",
                            Adet = 1,
                            Fiyat = 35m,
                            PicturePath = "~/wwwroot/Pictures/Tatlilar/irmikhelvasi.jpg"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Uye", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Adres = "Dunya",
                            ConcurrencyStamp = "843a5180-84f9-4bc6-821e-7a4a55cc0e12",
                            Email = "super@deneme.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@DENEME.COM",
                            NormalizedUserName = "SUPER@DENEME.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB5AH0osx71s8dAxwH2X0SD2WD2JNU1i1p5BTzUtE3WwkGTKqS4ih2WHuU/d3c4VhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f8aa1e7-246a-4f07-97f0-3b724227d255",
                            TwoFactorEnabled = false,
                            UserName = "super@deneme.com"
                        });
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.ViewModels.LoginVM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LoginVM");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.ViewModels.RegisterVM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RegisterVM");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.MenuDetay", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.EkstraMalzeme", "EkstraMalzeme")
                        .WithMany("MenuDetay")
                        .HasForeignKey("EkstraMalzemeID");

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Hamburger", "Hamburger")
                        .WithMany("MenuDetay")
                        .HasForeignKey("HamburgerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Icecek", "Icecek")
                        .WithMany("MenuDetay")
                        .HasForeignKey("IcecekID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Menu", "Menu")
                        .WithMany("MenuDetay")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Tatli", "Tatlı")
                        .WithMany("MenuDetay")
                        .HasForeignKey("TatlıID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EkstraMalzeme");

                    b.Navigation("Hamburger");

                    b.Navigation("Icecek");

                    b.Navigation("Menu");

                    b.Navigation("Tatlı");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Siparis", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Uye", "Uye")
                        .WithMany("Siparisler")
                        .HasForeignKey("UyeId");

                    b.Navigation("Uye");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.SiparisDetay", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.EkstraMalzeme", "EkstraMalzeme")
                        .WithMany("SiparisDetay")
                        .HasForeignKey("EkstraMalzemeID");

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Hamburger", "Hamburger")
                        .WithMany("SiparisDetay")
                        .HasForeignKey("HamburgerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Icecek", "Icecek")
                        .WithMany("SiparisDetay")
                        .HasForeignKey("IcecekID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Siparis", "Siparis")
                        .WithMany()
                        .HasForeignKey("SiparisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Tatli", "Tatli")
                        .WithMany("SiparisDetay")
                        .HasForeignKey("TatliID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EkstraMalzeme");

                    b.Navigation("Hamburger");

                    b.Navigation("Icecek");

                    b.Navigation("Siparis");

                    b.Navigation("Tatli");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.SiparisMenu", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Menu", "Menu")
                        .WithMany("SiparisMenu")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Siparis", "Siparis")
                        .WithMany("SiparisMenu")
                        .HasForeignKey("SiparisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Siparis");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MVC_Project_Group_4.Models.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.EkstraMalzeme", b =>
                {
                    b.Navigation("MenuDetay");

                    b.Navigation("SiparisDetay");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Hamburger", b =>
                {
                    b.Navigation("MenuDetay");

                    b.Navigation("SiparisDetay");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Icecek", b =>
                {
                    b.Navigation("MenuDetay");

                    b.Navigation("SiparisDetay");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Menu", b =>
                {
                    b.Navigation("MenuDetay");

                    b.Navigation("SiparisMenu");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Siparis", b =>
                {
                    b.Navigation("SiparisMenu");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Tatli", b =>
                {
                    b.Navigation("MenuDetay");

                    b.Navigation("SiparisDetay");
                });

            modelBuilder.Entity("MVC_Project_Group_4.Models.Concrete.Uye", b =>
                {
                    b.Navigation("Siparisler");
                });
#pragma warning restore 612, 618
        }
    }
}
